/*
 * Created brightSPARK Labs
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.11.0"

    // Apply the Groovy plugin to add support for Groovy
    id "groovy"

    // -------------------------------------------------------------------------
    // PLUGINS THIS PLUGIN WILL APPLY WHEN ADDED
    // -------------------------------------------------------------------------

    // NOTE: KEEP THESE VERSIONS ALIGNED WITH THE DEPENDENCIES BLOCK

    // Apply the Spotless plugin for formatting
    id "com.diffplug.gradle.spotless" version "3.30.0"

    // Apply the SpotBugs plugins for static code analysis
    id "com.github.spotbugs" version "4.2.0"

    // Apply the Gradle Versions + Use Latest Versions plugins for stale dependency checks
    id "com.github.ben-manes.versions" version "0.28.0"
    id "se.patrikerdes.use-latest-versions" version "0.2.13"

    // Apply the OWASP plugin for vulnerability dependency checks
    id "org.owasp.dependencycheck" version "5.3.2.1"
}


// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation(
            // Add external plugins here so they can be added via our plugin
            // NOTE: KEEP THESE VERSIONS ALIGNED WITH THE PLUGINS BLOCK
            // NOTE: Obtain plugin dependency strings from plugins.gradle.org page
            "com.diffplug.spotless:spotless-plugin-gradle:3.30.0",
            "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.2.0",
            "com.github.ben-manes:gradle-versions-plugin:0.28.0",
            "se.patrikerdes:gradle-use-latest-versions-plugin:0.2.13",
            "org.owasp:dependency-check-gradle:5.3.2.1",
            )

    // Use the awesome Spock testing and specification framework
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
}

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = "Applies brightSPARK Labs standardisation to gradle projects"
project.group       = "com.brightsparklabs"

def versionProcess  = "git describe --always --dirty".execute()
versionProcess.waitFor()
project.version     = versionProcess.exitValue() == 0 ? versionProcess.text.trim() : "0.0.0-UNKNOWN"

project.ext.scm     = "https://github.com/brightsparklabs/gradle-baseline.git"
project.ext.url     = "https://github.com/brightsparklabs/gradle-baseline"

// -----------------------------------------------------------------------------
// java-gradle-plugin
// -----------------------------------------------------------------------------

gradlePlugin {
    // Define the plugin
    plugins {
        baseline {
            id = "com.brightsparklabs.gradle.baseline"
            implementationClass = "com.brightsparklabs.gradle.baseline.BaselinePlugin"
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

pluginBundle {
    website = project.url
    vcsUrl = project.scm
    description = project.description
    tags = [
        "brightsparklabs",
        "gradle",
        "baseline",
    ]

    plugins {
        baseline {
            displayName = "Gradle Baseline at brightSPARK Labs"
        }
    }
}

// -----------------------------------------------------------------------------
// spotbugs
// -----------------------------------------------------------------------------

spotbugs {
    excludeFilter = file("findbugs-exclude.xml")
}
tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// spotless
// -----------------------------------------------------------------------------

def header = """/*
               | * Maintained by brightSPARK Labs.
               | * www.brightsparklabs.com
               | *
               | * Refer to LICENSE at repository root for license details
               | */
             """.stripMargin("|")
spotless {
    java {
        licenseHeader(header)
        googleJavaFormat().aosp()
    }
    groovy {
        licenseHeader(header)
        excludeJava() // excludes all Java sources within the Groovy source dirs from formatting
        // the Groovy Eclipse formatter extends the Java Eclipse formatter,
        // so it formats Java files by default (unless `excludeJava` is used).
        greclipse()
        indentWithSpaces(4)
    }
    groovyGradle {
        // same as groovy, but for .gradle (defaults to "*.gradle")
        //licenseHeader(header)
        greclipse()
        indentWithSpaces(4)
    }
}
